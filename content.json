{"meta":{"title":"王 亮","subtitle":null,"description":null,"author":null,"url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-03-10T08:16:42.285Z","updated":"2019-03-10T08:16:42.285Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"type: “categories”layout: “categories”"},{"title":"","date":"2019-03-10T08:16:49.828Z","updated":"2019-03-10T08:16:49.828Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"type: “tags”layout: “tags”"},{"title":"","date":"2019-03-10T08:29:36.592Z","updated":"2019-03-10T08:29:13.250Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"type: “about”layout: “about”"}],"posts":[{"title":"Git篇（二）","slug":"Git常用操作(二)","date":"2019-03-10T03:57:07.000Z","updated":"2019-03-10T10:03:18.084Z","comments":true,"path":"2019/03/10/Git常用操作(二)/","link":"","permalink":"http://yoursite.com/2019/03/10/Git常用操作(二)/","excerpt":"","text":"关于“Git篇（一）”和“Git篇（二）” 这两篇中的内容大部分是从前人博客中摘取来的 便于自己和大家查看，文末已给出原博客地址。 Git基本使用Git远程操作 git clone： 远程 clone 即复制/克隆一个完整的 repository (仓库，即项目代码) 到本地，克隆仓库时所使用的远程主机自动被 Git 命名为 origin，如果想用其他的主机名，需要用git clone命令的-o选项指定。格式为：git clone -o jQuery https://github.com/jquery/jquery.git 然后git remote命令查看，可以看到名字为远程主机名 jQuery。 这里要特别说下，这里克隆可以有两种方式，一种 https 方式，一种 ssh 方式。 ①如果是 https 方式，复制仓库 https 地址进行 clone 操作，如：git clone https://github.com/XXX/XXX.git 这样克隆下来的项目仓库，注意观察.git文件夹下的config中的文件 url： [remote “origin”] url = https://github.com/XXX/XXX.git fetch = +refs/heads/:refs/remotes/origin/[branch “master”] remote = origin merge = refs/heads/master ②如果是 ssh 方式，复制仓库的 ssh 地址进行 clone 操作，如：git clone git@github.com:XXX/XXX.git 这样克隆下来的项目仓库，注意观察.git文件夹下的config中的文件 url： [remote “origin”] url = git@github.com:XXX/XXX.git fetch = +refs/heads/:refs/remotes/origin/[branch “master”] remote = origin merge = refs/heads/master 注1： 可以看到，https 方式下 url 为 「https 地址」，ssh 方式下 url 为「ssh 地址」（我就这么任性表达了，反正意思明白就行），所以假设你采用的 https 方式 clone 下来的项目可以通过修改这个 url 为「ssh 地址」，这样本地仓库就相当于是使用了 「ssh 方式 clone 下来的」。 注2：两者的区别有，若采用的 https 方式，则每次提交代码至 GitHub 时，都要求输入 GitHub 账号和密码才能提交，若 ssh 方式，则不需要每次的输入。但当然这前提是你已经添加 ssh 。 关于 SSH 协议的历史，可以看看这篇文章：SSH 协议（Secure Shell 协议）。 这里引用我看到的网上资料关于 https 和 SSH 的区别说下： 前者可以随意克隆 github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。https url 在 push 的时候是需要验证用户名和密码的；而 SSH 在 push 的时候，是不需要输入用户名的，如果配置 SSH key 的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。关于如何添加 ssh 下面是步骤： Linux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash（即安装了 Git 就有这个） 应该也是带了 SSH 的，在终端输入ssh命令可以查看是否安装了 ssh； 紧接着输入 ssh-keygen -t rsa 或者ssh-keygen -t rsa -C “注释”格式 ，就是指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码）然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。这两文件默认分别在如下目录里生成： Linux/Mac 系统 在 ~/.ssh 下，win系统在 /c/Documents and Settings/username/.ssh 下， 都是隐藏目录，大家应该能找到的； PS： 其实在连续安回车键中会提示输入一个密码以及确认密码，这个密码会在你提交项目时使用，如果为空的话（即直接按回车键，也即未设置密码）提交项目代码时则不用输入密码； 接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上（PS：如何添加自行网上搜下，就不多说了），这样你本地的 id_rsa 密钥跟 GitHub 上的 id_rsa.pub 公钥进行配对，授权成功，这样就可以不用像 https 方式每次输入账号和密码进行验证身份才能提交了。（你就理解为，SSH 就好比进行了身份验证的这种理解。） SSH key 添加成功之后，输入 ssh -T git@github.com 进行测试，如果出现以下提示，再输入 yes 便添加成功了。 补充：对于命令 ssh-keygen添加不同参数的含义—— ssh-keygen参数说明。 实战学习 代码提交到 GitHub 上两种克隆方式采用 HTTPS 方式克隆 GitHub 上仓库(项目)：https://github.com/XXX/DemoSpase.git采用 SSH 方式克隆：git clone git@github.com:wangliang19960516/DemoSpase.git如果想要在克隆至本地时指定别的目录名称，可以在后面加个参数，如：git clone https://github.com/XXX/DemoSpase.git git-practice-another，手动指定本地仓库的根目录名称为 git-practice-another。 · GitHub 中的 SSH 和 HTTPS 提交区别： git使用ssh密钥和https两种认证方式汇总从 GitHub 上 Clone 一个项目到本地的时候，有 use https 和 use ssh 两种方式，这两种主要是在 push 项到 GitHub 上时有所不同。完成一个 push 操作，需要对其内容进行安全管理，这里提供了 ssh 和 https 两种方式。而在 Clone 项目到本地时，做出选择后，就已经决定了 push 的方式。 SSH 使用了 RSA，即非对称加密的方式，存在一个公钥和私钥。可以生成一个本地的一组秘钥，然后将公钥复制到 GitHub 的 settings/profile 下。使用 https 方式，每次需要验证用户身份信息。 采用https方式克隆在使用 git status 命令查看仓库状态若是看到： your branch is ahead of ‘origin/master’ by 2 commits. ，解释下： Git 提示你的当前 branch 已经领先于（ “ahead of” ）‘origin/master’ 两个提交了origin/master 的中的 origin 是远端仓库的名称，是你在用 Clone 指令初始化本地仓库时 Git 自动帮你起的默认名称；master 是 origin 上的分支名称。可以暂时把 origin/master 简单理解为「中央仓库」，也就是说，这句话是告诉你，你的本地仓库已经领先中央仓库两个提交了。然后可以使用 git push 提交发布至中央服务器（这里即指 GitHub）。 因为采用的是 https 方式克隆，所以在这个过程 GitHub 会向你索要账户和密码。填入正确的账户和密码，push 操作就完成了。这时你再去你的 GitHub 仓库页面可以看到提交记录。说明你已经成功把本地仓库的提交推送到了服务器了。 PS：如果觉得一遍遍地输入密码很烦，可以按照 这个页面 提供的方案来把密码保存起来。另外还有一个更简单但安全性低一些的方案。执行这行代码：git config credential.helper store，在这之后你只需要再输入一次密码， Git 就会把你的密码保存下来，这之后就再也不用输入了。说它「安全性低」，是因为这条指令会让 Git 把你的密码以明文形式保存在你的电脑上。具体这两种保存密码的方案选择哪个，看你自己了。 · 总结下： 从 GitHub 把中央仓库 Clone 到本地把写完的代码提交。即先使用命令：git clone，再用 git add 文件名 把文件添加到暂存区，再用 git commit 提交；在这个过程中，可以使用 git status 来随时查看工作目录的状态。每个文件有 “changed / unstaged”（已修改）, “staged”（已修改并暂存）, “commited”（已提交） 三种状态，以及一种特殊状态 “untracked”（未跟踪）；提交一次或多次之后，把本地提交 push 到中央仓库（命令：git push）。 采用ssh方式克隆在拥有了一个 GitHub 账号之后，就可以自由的 Clone 或者下载其他项目，也可以创建自己的项目，但是你没法提交代码。仔细想想也知道，肯定不可能随意就能提交代码的，如果随意可以提交代码，那么 GitHub 上的项目岂不乱了套了，所以提交代码之前一定是需要某种授权的，而 GitHub 上一般都是基于 SSH 授权的。那么什么是 SSH 呢？ 简单点说，SSH 是一种网络协议，用于计算机之间的加密登录。目前是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在 GitHub 提交代码的第一步就是要先添加 SSH key 配置。 · 添加 SSH 步骤： Git Bash下输入 ssh 查看电脑是否安装了 ssh；紧接着输入 ssh-keygen -t rsa，什么意思呢？就是指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码） ，然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。这两文件默认分别在如下目录里生成： Linux/Mac 系统 在 ~/.ssh 下，Windows 系统在 /c/Documents and Settings/username/.ssh 下， 都是隐藏文件。接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub 上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码。SSH key 添加成功之后，输入 ssh -T git@github.com 进行测试。最后就是 push、pull 的操作了。添加 SSH key 成功之后，我们就有权限向 GitHub 上我们自己的项目提交代码了。执行：git push origin master 进行代码提交。 实践： 假设我们本地有个 test2 的项目，我们需要的是在 GitHub 上建一个 test 的项目，然后把本地 test2 上的所有代码 commit 记录提交到 GitHub 上的 test 项目。第一步就是在 GitHub 上建一个 test 仓库，具体怎么操作我就不多说了吧； 第二步切换到 test2 目录，打开 Git Bash，把本地 test2 项目与 GitHub 上的 test 项目进行关联：git remote add origin git@github.com:XXX/XXX.git 什么意思呢？就是添加一个远程仓库，地址是 git@github.com:strivebo/test.git，而 origin 是给这个项目的远程仓库起的名字，是的，名字你可以随便取，只不过大家公认的只有一个远程仓库时名字就是 origin ，为什么要给远程仓库取名字？因为我们可能一个项目有多个远程仓库？比如 GitHub 一个，比如公司一个，这样的话提交到不同的远程仓库就需要指定不同的仓库名字了。 PS：查看我们当前项目有哪些远程仓库可以执行如下命令： git remote -v，接下来，我们本地的仓库就可以向远程仓库进行代码提交了：git push origin master，就是默认向 GitHub 上的 test 仓库提交了代码，而这个代码是在 master 分支，当然你可以提交到指定的分支。 再次强调： Git 使用 https 协议，每次 pull，push 都要输入密码，相当的烦。使用 Git 协议，然后使用 ssh 密钥，这样可以省去每次都输密码。 说明：Git篇(二) 内容取自该博主，作为个人学习内容。作者：Jaybo_原文：https://blog.csdn.net/u012195214/article/details/79189057","categories":[],"tags":[]},{"title":"Git篇（一）","slug":"Git常用操作(一)","date":"2019-03-10T03:56:58.000Z","updated":"2019-03-10T10:03:29.303Z","comments":true,"path":"2019/03/10/Git常用操作(一)/","link":"","permalink":"http://yoursite.com/2019/03/10/Git常用操作(一)/","excerpt":"","text":"关于“Git篇（一）”和“Git篇（二）” 这两篇中的内容大部分是从前人博客中摘取来的 便于自己和大家查看，文末已给出原博客地址。 Git基本使用Git地本常用命令· git init 用户初始化git仓库（会生成影藏文件 .git） 用户信息配置（name&amp;email，记得在“ ”添加） 配置用户名 ：git config –global uer.name “wangliang19960516” 配置用户名 ：git config –global uer.email “wangliang19960516@163.com“ · 代码存储到 .git 仓库中 · git add ./ aim.txt 将制定文件（此处以aim.txt为例）把一个文件从untracked（未被追踪）状态转为到 staged状态 直白的讲，就是把文件提交到暂缓区，这个时候还没真正意义上的代码提交 格式为：git add .提交所有改动，git add aim.txt 提交指定文件的改动 · git commit 这步才是真正的代码提交到仓库 格式为：git commit 或者加参数 git commit -m “这次的提交说明信息” 记得引号内添加备注信息 · git status 查看仓库文件状态 简洁样式可使用参数 -s：git status -s · git reset –hard 版本回退操作 比如我想把当前的版本回退到上一个版本： 第一种方式：git reset –hard HEAD^那么如果要回退到上上个版本只需把 HEAD^ 改成 HEAD^^ 第二种方式：那如果要回退到前X个版本的话，使用命令操作：git reset –hard HEAD~X · git log 查看提交历史记录，版本历史信息，提交人&amp;时间 · git diff （不加选项参数）可以显示工作目录和暂存区之间的不同 可以让你看到「如果你现在把所有文件都 add，你会向暂存区中增加哪些内容」 比如git diff develop，查看当前版本和 develop 分支的差异 · git diff –cached 查看已经暂存起来的文件和上次提交的版本之间的差异 git diff –cached filename 查看已经暂存起来的某个文件和上次提交的版本之间的差异 · git diff –staged 使用 git diff –staged 可以显示暂存区和上一条提交之间的不同 换句话说，这条指令可以让你看到「如果你立即输入 git commit，你将会提交什么」 · git branch 查看有哪些分支，并且能看到当前处于哪个分支上。PS：初始化仓库后默认有 master 这个主分支，一般情况下不会轻易在该主分支操作。新建分支可以使用git branch 格式，如 git branch dev新建分支 dev，其内容和和主分支一模一样。 · git branch -a 查看本地和远程所有分支 · git branch -r 查看远程所有分支 · git branch -v 查看远程分支详细信息 · git checkout a 切换到 a 分支。 · git checkout -b a 表示新建分支 a 并同时切换到分支 a。 · git merge 合并分支代码，比如合并 dev 分代码，需要先切换到 master 分支，再git merge dev即可合并 dev 分支代码 · git merge – about 会尝试恢复到你运行合并前的状态。 但当运行命令前，在工作目录中有未储藏、未提交的修改时它不能完美处理 由于现在 Git 仓库处于冲突待解决的中间状态，所以如果你最终决定放弃这次 merge 需要执行一次 merge –abort 来手动取消它。输入这行代码，你的 Git 仓库就会回到 merge 前的状态。 · git branch -d 删除分支。 假如这个分支新建错了，或者a分支的代码已经顺利合并到 master 分支来了 此时 a 分支没用了，需要删除，执行 git branch -d a 就可以把a分支删除了。 · git branch -D 强制删除。有些时候可能会删除失败 比如如果 a 分支的代码还没有合并到 master，你执行 git branch -d a 是删除不了的 它会智能的提示你 a 分支还有未合并的代码 但是如果你非要删除，那就执行 git branch -D a 就可以强制删除 a 分支。 · git tag 新建标签。 我们在客户端开发的时候经常有版本的概念，比如 v1.0、v1.1 之类的 不同的版本肯定对应不同的代码，一般要给我们的代码加上标签（即把某次提交标记为某个 tags，如 v1.0） 这样假设 v1.1 版本出了一个新 bug，但是又不晓得 v1.0 是不是有这个 bug 有了标签就可以顺利切换到 v1.0 的代码，重新打个包测试了 所以如果想要新建一个标签很简单 比如 git tag v1.0 就代表我在当前代码状态下新建了一个 v1.0 的标签 输入 git tag 可以查看历史 tag 记录 想要切换到某个 tag，执行：git checkout v1.0，就可以切换到 v1.0 的代码状态。 说明：Git篇(一) 部分内容取自该博主，作为个人学习内容。作者：Jaybo_原文：https://blog.csdn.net/u012195214/article/details/79189057","categories":[],"tags":[]},{"title":"第一篇文章","slug":"我的第一篇文章","date":"2019-03-08T03:37:18.000Z","updated":"2019-03-10T09:56:49.080Z","comments":true,"path":"2019/03/08/我的第一篇文章/","link":"","permalink":"http://yoursite.com/2019/03/08/我的第一篇文章/","excerpt":"","text":"我的第一篇文章主要是做一个留念吧。 哈哈，感谢指导我的各位大佬们，对吧。介绍一下接触的新东西1.首先要说node.js node.js很小，安装也很方便（搭建此blog是用hexo,是基于node.js的，所以先说吧） 虽然一直听别人说这个东西，但是自己却从来没有了解过，欸，惭愧啊。 不过今天开始接触了，迟到总比不到好。 在学习之路上我们遇到问题也可以一起交♂流，一起进步。 2.hexo，大佬们对这个自然不陌生，我的话对hexo也只是简单了解，个人还是比较喜欢的。 今后有机会的话会就常用吧，感觉还是比较有意思的。 对于小白来说，hexo框架还是很友好的，用过就知道，嗯，没错儿~ 3.第三个就是关于博客文档的编写过程，编写的工具很多，这个就看个人习惯吧， 目前看很多人用Typora,但我并不太习惯，md编写的语法并不难，我感觉多写一写就上手了。 图片、代码、超链接、表格等都能很好的展示，我也会在今后尝试去用，感觉还是很棒的。 最后的话还是要祝贺自己有了blog今后呢我也会尽可能的更新Archives也迎小伙伴们联系我","categories":[],"tags":[]}]}